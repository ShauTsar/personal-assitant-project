package main

import (
	"context"
	"encoding/json"
	"fmt"
	_ "github.com/lib/pq"
	"github.com/redis/go-redis/v9"
	tb "gopkg.in/telebot.v3"
	"log"
	"personal-assitant-project/config"
	botConfig "personal-assitant-project/personal-assitant-server/botAPI/config"
	"personal-assitant-project/personal-assitant-server/storage/elastic"
	"personal-assitant-project/personal-assitant-server/storage/postgre"
	"strconv"
	"strings"
	"time"
)

var ctx = context.Background()

var redisClient *redis.Client

func init() {
	redisConfig := config.LoadRedisConfig()
	redisClient = redis.NewClient(&redis.Options{
		Addr: redisConfig.Addr,
		DB:   redisConfig.DBTelegramEvents,
	})
}

// TODO –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è –ø–æ—Ö–≤–∞–ª—É, –≤—ã –º–æ–ª–æ–¥–µ—Ü! –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å—Ç–æ–ª—å–∫–æ-—Ç–æ –ø–ª–∞–Ω–æ–≤
var (
	menu                   = &tb.ReplyMarkup{}
	selector               = &tb.ReplyMarkup{}
	tasks                  = &tb.ReplyMarkup{}
	btnHelp                = menu.Data("‚Ñπ Help", "help")
	btnSettings            = menu.Data("‚öô Settings", "settings")
	btnBusinessForToday    = menu.Data("–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "today")
	btnNonFinishedBusiness = menu.Data("–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "unfinished_today")
	btnBusinessForTomorrow = menu.Data("–î–µ–ª–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "tomorrow")
	btnAddNewTask          = menu.Data("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", "addTask", "")
	btnPrev                = selector.Data("‚¨Ö", "prev", "")
	btnFinishTask          = tasks.Data("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "finish")
	btnUnFinishTask        = tasks.Data("–í–µ—Ä–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ", "unFinish", "")
)

func main() {
	menu.Inline(
		menu.Row(btnHelp, btnSettings),
		menu.Row(btnBusinessForToday, btnBusinessForTomorrow),
		menu.Row(btnNonFinishedBusiness),
	)
	selector.Inline(
		selector.Row(btnPrev),
	)
	tasks.Inline(
		tasks.Row(btnPrev),
		tasks.Row(btnFinishTask),
	)
	b, err := tb.NewBot(tb.Settings{
		Token:  botConfig.TOKEN,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatal(err)
		return
	}

	b.Handle("/start", func(c tb.Context) error {
		return c.Send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å.üòè", menu)
	})
	b.Handle(&btnHelp, func(c tb.Context) error {
		return c.Send("–í —Ä–∞–±–æ—Ç–µüòè", selector)
	})
	b.Handle(&btnSettings, func(c tb.Context) error {
		return c.Send("–í —Ä–∞–±–æ—Ç–µüòè", selector)
	})
	b.Handle(&btnBusinessForToday, getBusinessForTodayFromDB)
	b.Handle(&btnNonFinishedBusiness, getBusinessNotFinishedForTodayFromDB)
	b.Handle(&btnBusinessForTomorrow, getBusinessForTomorrowFromDB)
	b.Handle(&btnFinishTask, finishTask)
	b.Handle(&btnUnFinishTask, unFinishTask)
	b.Handle(&btnPrev, func(c tb.Context) error {
		return c.Send("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", menu)
	})
	go sendEventReminders(b)
	go sendNotifyEveryMoring(b)
	go sendEveryEveningForUsers(b)
	b.Start()
}
func sendNotifyEveryMoring(b *tb.Bot) {
	allUsers, err := postgre.GetAllTGUsersID()
	if err != nil {
		elastic.LogToElasticsearch(fmt.Sprintf("Error getting all users:", err))
		log.Println("Error getting all users:", err)
		return
	}
	for _, user := range allUsers {
		settings, err := postgre.GetUserSettings(user.UserID)
		if err != nil {
			elastic.LogToElasticsearch(fmt.Sprintf("Error getting settings:", err))
			log.Println("Error getting settings:", err)
			return
		}
		now := time.Now()
		targetTime := time.Date(now.Year(), now.Month(), now.Day(), int(settings.NotifyMorningHours), 0, 0, 0, now.Location())
		if now.After(targetTime) {
			targetTime = targetTime.Add(24 * time.Hour)
		}
		time.Sleep(targetTime.Sub(now))
		sendMorningTaskListToAllUsers(b, user)
	}
}
func sendEveryEveningForUsers(b *tb.Bot) {
	allUsers, err := postgre.GetAllTGUsersID()
	if err != nil {
		elastic.LogToElasticsearch(fmt.Sprintf("Error getting all users:", err))
		log.Println("Error getting all users:", err)
		return
	}
	for _, user := range allUsers {
		settings, err := postgre.GetUserSettings(user.UserID)
		if err != nil {
			elastic.LogToElasticsearch(fmt.Sprintf("Error getting settings:", err))
			log.Println("Error getting settings:", err)
			return
		}
		now := time.Now()
		targetTime := time.Date(now.Year(), now.Month(), now.Day(), int(settings.NotifyEveryEveningHours), 0, 0, 0, now.Location())
		if now.After(targetTime) {
			targetTime = targetTime.Add(24 * time.Hour)
		}
		time.Sleep(targetTime.Sub(now))
		allUsers, err = postgre.GetAllTGUsersID()
		if err != nil {
			elastic.LogToElasticsearch(fmt.Sprintf("Error getting all users:", err))
			log.Println("Error getting all users:", err)
			return
		}
		sendEveningTaskListToAllUsers(b, user)
	}
}
func sendEventReminders(b *tb.Bot) {
	ticker := time.NewTicker(1 * time.Minute) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	defer ticker.Stop()

	for range ticker.C {
		now := time.Now()
		allUsers, err := postgre.GetAllTGUsersID()
		if err != nil {
			elastic.LogToElasticsearch(fmt.Sprintf("Error getting all users:", err))
			log.Println("Error getting all users:", err)
			continue
		}

		for _, user := range allUsers {
			settings, err := postgre.GetUserSettings(user.UserID)
			if err != nil {
				elastic.LogToElasticsearch(fmt.Sprintf("Error getting settings:", err))
				log.Println("Error getting settings:", err)
				return
			}
			events, err := postgre.FindTasksByUser(user.UserID)
			if err != nil {
				elastic.LogToElasticsearch(fmt.Sprintf("Error getting events for user:", err))
				log.Println("Error getting events for user:", err)
				continue
			}

			for _, event := range events {
				if !event.IsFinished {
					reminderTime := event.PlannedDate.Add(-time.Duration(settings.NotifyBeforeEventHours) * time.Minute)
					if now.After(reminderTime) && now.Before(event.PlannedDate) {
						sendReminderForEvent(b, user.TGUserID, event)
					}
				}
			}
		}
	}
}
func sendReminderForEvent(b *tb.Bot, userID int64, event postgre.EventData) {
	formattedTime := event.PlannedDate.Format("02.01.2006 15:04")
	message := fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s\n–í—Ä–µ–º—è: %s", event.Title, formattedTime)
	_, err := b.Send(&tb.User{ID: userID}, message)
	if err != nil {
		log.Printf("Error sending reminder to user %d: %v\n", userID, err)
	}
}

func finishTask(c tb.Context) error {
	taskID, err := strconv.Atoi(c.Callback().Data)
	if err != nil {
		return c.Reply("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!", selector)
	}
	redisKey := fmt.Sprintf("user:%d", c.Sender().ID)
	postgre.FinishTask(taskID, true)
	redisClient.Set(ctx, fmt.Sprintf("%s:last_update", redisKey), time.Now().Add(time.Duration(-5)*time.Minute).Format(time.RFC3339), 0)
	return c.Reply("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", selector)
}
func unFinishTask(c tb.Context) error {
	taskID, err := strconv.Atoi(c.Callback().Data)
	if err != nil {

	}
	redisKey := fmt.Sprintf("user:%d", c.Sender().ID)
	postgre.FinishTask(taskID, false)
	redisClient.Set(ctx, fmt.Sprintf("%s:last_update", redisKey), time.Now().Add(time.Duration(-5)*time.Minute).Format(time.RFC3339), 0)
	return c.Reply("–°–æ–±—ã—Ç–∏–µ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", selector)
}
func sendEventsToUser(filteredEvents []postgre.EventData, c tb.Context, includeFinished bool) error {
	if len(filteredEvents) == 0 {
		return c.Send("–ù–∏–∫–∞–∫–∏—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª", selector)
	}
	for _, event := range filteredEvents {
		formattedTime := event.PlannedDate.Format("02.01.2006 15:04")
		formattedStartDate := event.StartDate.Format("02.01.2006 15:04")
		attachment := ""
		if string(event.Attachment) != "" {
			attachment = "Attachment: " + string(event.Attachment)
		}
		statusEmoji := "‚ùóÔ∏è"
		keyboard := tasks
		btnFinishTask = keyboard.Data("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "finish", strconv.Itoa(event.TaskID))
		keyboard.Inline(keyboard.Row(btnPrev), keyboard.Row(btnFinishTask))
		if event.IsFinished {
			statusEmoji = "‚úÖ"
			keyboard = &tb.ReplyMarkup{}
			btnUnFinishTask = keyboard.Data("–í–µ—Ä–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ", "unFinish", strconv.Itoa(event.TaskID))
			keyboard.Inline(keyboard.Row(btnPrev), keyboard.Row(btnUnFinishTask))
		}
		message := fmt.Sprintf(
			"–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s %s\n"+
				"–û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
				"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: %s\n"+
				"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %s\n"+
				"%s", event.Title, statusEmoji, event.Description, formattedTime, formattedStartDate, attachment)
		if err := c.Send(message, keyboard); err != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
			return err

		}
	}

	return nil
}
func sendEventsToAllUsers(filteredEvents []postgre.EventData, tgUserID int64, includeFinished bool, b *tb.Bot, messageText string) error {
	if len(filteredEvents) == 0 {
		return nil
	}
	for _, event := range filteredEvents {
		formattedTime := event.PlannedDate.Format("02.01.2006 15:04")
		formattedStartDate := event.StartDate.Format("02.01.2006 15:04")
		attachment := ""
		if string(event.Attachment) != "" {
			attachment = "Attachment: " + string(event.Attachment)
		}
		statusEmoji := "‚ùóÔ∏è"
		keyboard := tasks
		btnFinishTask = keyboard.Data("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "finish", strconv.Itoa(event.TaskID))
		keyboard.Inline(keyboard.Row(btnPrev), keyboard.Row(btnFinishTask))
		if event.IsFinished {
			statusEmoji = "‚úÖ"
			keyboard = &tb.ReplyMarkup{}
			btnUnFinishTask = keyboard.Data("–í–µ—Ä–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ", "unFinish", strconv.Itoa(event.TaskID))
			keyboard.Inline(keyboard.Row(btnPrev), keyboard.Row(btnUnFinishTask))
		}
		message := fmt.Sprintf(
			messageText+
				"–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s %s\n"+
				"–û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
				"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: %s\n"+
				"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %s\n"+
				"%s", event.Title, statusEmoji, event.Description, formattedTime, formattedStartDate, attachment)
		_, err := b.Send(&tb.User{ID: tgUserID}, message, keyboard)
		if err != nil {
			log.Printf("Error sending evening message to user %d: %v\n", tgUserID, err)
		}
	}

	return nil
}
func getBusinessForTomorrowFromDB(c tb.Context) error {
	events, err := getEventsFromCache(c)
	if err != nil {
		return err
	}

	// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ PlannedDate —Ä–∞–≤–Ω–æ–º—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
	tomorrow := time.Now().Add(24 * time.Hour).Format("2006-01-02")
	var filteredEvents []postgre.EventData
	for _, event := range events {
		eventDate := event.PlannedDate.Format("2006-01-02")
		if eventDate == tomorrow {
			filteredEvents = append(filteredEvents, event)
		}
	}
	return sendEventsToUser(filteredEvents, c, true)
}

//TODO –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ postgre tg_messages, –≥–¥–µ –±—É–¥–µ—Ç id –∏–∑ tg bot id —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∞—Å–∫–∞
//TODO –ª–∏–±–æ –∫–∞–∫-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ eventData task_id –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ—Ç task id

func getBusinessNotFinishedForTodayFromDB(c tb.Context) error {
	events, err := getEventsFromCache(c)
	if err != nil {
		return err
	}

	// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ PlannedDate —Ä–∞–≤–Ω–æ–º—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
	today := time.Now().Format("2006-01-02")
	var filteredEvents []postgre.EventData
	for _, event := range events {
		eventDate := event.PlannedDate.Format("2006-01-02")
		if eventDate == today && !event.IsFinished {
			filteredEvents = append(filteredEvents, event)
		}
	}
	return sendEventsToUser(filteredEvents, c, false)
}

// TODO –ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ª–∏–±–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ postgre, –ª–∏–±–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è  –∏ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ redis
func getBusinessForTodayFromDB(c tb.Context) error {
	events, err := getEventsFromCache(c)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return err
	}

	// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ PlannedDate —Ä–∞–≤–Ω–æ–º—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
	today := time.Now().Format("2006-01-02")
	var filteredEvents []postgre.EventData
	for _, event := range events {
		eventDate := event.PlannedDate.Format("2006-01-02")
		if eventDate == today {
			filteredEvents = append(filteredEvents, event)
		}
	}

	return sendEventsToUser(filteredEvents, c, true)
}
func getEventsFromCache(c tb.Context) ([]postgre.EventData, error) {
	var cachedEvents []postgre.EventData
	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
	redisKey := fmt.Sprintf("user:%d", c.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Redis
	lastUpdate, err := redisClient.Get(ctx, redisKey+":last_update").Result()
	if err != nil || lastUpdate == "" {
		// –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
		cachedEvents, err = updateCache(c, redisKey)
		if err != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
			return nil, err
		}
		return cachedEvents, nil
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	lastUpdateDate, err := time.Parse(time.RFC3339, lastUpdate)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	if time.Since(lastUpdateDate) > 1*time.Minute {
		// –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
		cachedEvents, err = updateCache(c, redisKey)
		if err != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
			return nil, err
		}
	}
	cachedData, err := redisClient.Get(ctx, redisKey).Result()
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}
	err = json.Unmarshal([]byte(cachedData), &cachedEvents)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	return cachedEvents, nil
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
func updateCache(c tb.Context, redisKey string) ([]postgre.EventData, error) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Postgres
	userID, err := postgre.GetUserIDFromTasks(c.Sender().ID)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}
	events, err := postgre.FindTasksByUser(userID)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ JSON
	eventsJSON, err := json.Marshal(events)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis
	redisClient.Set(ctx, redisKey, eventsJSON, 0) // 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
	redisClient.Set(ctx, fmt.Sprintf("%s:last_update", redisKey), time.Now().Format(time.RFC3339), 0)

	return events, nil
}

func sendMorningTaskListToAllUsers(b *tb.Bot, user postgre.AllTBotUsers) {
	today := time.Now().Format("2006-01-02")
	taskListMessage, err := postgre.FindTasksByUser(user.UserID)
	var filteredEvents []postgre.EventData
	for _, event := range taskListMessage {
		eventDate := event.PlannedDate.Format("2006-01-02")
		if eventDate == today {
			filteredEvents = append(filteredEvents, event)
		}
	}
	if err != nil {
		log.Printf("Error getting morning task list for user %d: %v\n", user.UserID, err)
	}
	messageText := "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ç–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
	sendEventsToAllUsers(filteredEvents, user.TGUserID, true, b, messageText)

}

func sendEveningTaskListToAllUsers(b *tb.Bot, user postgre.AllTBotUsers) {
	today := time.Now().Format("2006-01-02")
	taskListMessage, err := postgre.FindTasksByUser(user.UserID)
	var filteredEvents []postgre.EventData
	for _, event := range taskListMessage {
		eventDate := event.PlannedDate.Format("2006-01-02")
		if eventDate == today || event.IsFinished {
			filteredEvents = append(filteredEvents, event)
		}
	}
	if err != nil {
		log.Printf("Error getting morning task list for user %d: %v\n", user.UserID, err)
	}
	messageText := "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä –∏ —Ç–∞–∫ –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:"
	sendEveningEventsToAllUsers(filteredEvents, user.TGUserID, true, b, messageText)

}
func sendEveningEventsToAllUsers(filteredEvents []postgre.EventData, tgUserID int64, includeFinished bool, b *tb.Bot, messageText string) error {
	if len(filteredEvents) == 0 {
		return nil
	}
	var result []string
	for _, event := range filteredEvents {
		if event.FinishedDate.Format("02.01.2006") == time.Now().Format("02.01.2006") {
			formattedTime := event.PlannedDate.Format("02.01.2006 15:04")
			formattedStartDate := event.StartDate.Format("02.01.2006 15:04")
			attachment := ""
			if string(event.Attachment) != "" {
				attachment = "Attachment: " + string(event.Attachment)
			}
			statusEmoji := "‚ùóÔ∏è"
			if event.IsFinished {
				statusEmoji = "‚úÖ"
				message := fmt.Sprintf(
					messageText+
						"–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s %s\n"+
						"–û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
						"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: %s\n"+
						"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %s\n"+
						"%s", event.Title, statusEmoji, event.Description, formattedTime, formattedStartDate, attachment)
				result = append(result, message)
			}
		} else {
			continue
		}

	}
	resultMessage := strings.Join(result, "\n")
	_, err := b.Send(&tb.User{ID: tgUserID}, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏: "+strconv.Itoa(len(result))+resultMessage)
	if err != nil {
		log.Printf("Error sending evening message to user %d: %v\n", tgUserID, err)
	}
	return nil
}
