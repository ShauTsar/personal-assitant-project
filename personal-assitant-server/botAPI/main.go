package main

import (
	tb "gopkg.in/telebot.v3"
	"log"
	"personal-assitant-project/personal-assitant-server/botAPI/config"
	"time"
)

var (
	// Universal markup builders.
	menu     = &tb.ReplyMarkup{ResizeKeyboard: true}
	selector = &tb.ReplyMarkup{}

	btnHelp     = menu.Text("‚Ñπ Help")
	btnSettings = menu.Text("‚öô Settings")
	//TODO –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–ª–∞ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–º–µ—Ç–∫—É —Å–¥–µ–ª–∞–Ω–æ –æ–Ω–æ –∏–ª–∏ –Ω–µ—Ç, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–æ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
	btnBusinessForToday    = menu.Text("–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
	btnNonFinishedBusiness = menu.Text("–ù–µ–∑–∞–≤—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–µ–ª–∞")
	btnPrev                = selector.Data("‚¨Ö", "prev", "")
)

func main() {

	menu.Reply(
		menu.Row(btnHelp),
		menu.Row(btnSettings, btnBusinessForToday),
	)
	selector.Inline(
		selector.Row(btnPrev),
	)
	b, err := tb.NewBot(tb.Settings{
		Token:  config.TOKEN,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatal(err)
		return
	}

	b.Handle("/start", func(c tb.Context) error {
		return c.Send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ä–∞–¥ –ø—Ä–∏–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ãüòè", menu)
	})

	b.Handle(&btnHelp, func(c tb.Context) error {
		return c.Send("–í —Ä–∞–±–æ—Ç–µüòè", selector)
	})
	b.Handle(&btnBusinessForToday, getBusinessForTodayFromDB)

	//TODO –Ω–∞–π—Ç–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
	//b.Handle(&btnPrev, func(c tb.Context) error {
	//	return c.Send("t", menu)
	//})

	b.Start()
}
func getBusinessForTodayFromDB(c tb.Context) error {
	return c.Send("–í —Ä–∞–±–æ—Ç–µüòè", selector)
}
